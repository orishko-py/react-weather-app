{"version":3,"sources":["weatherIcons/day.svg","weatherIcons/night.svg","weatherIcons/cloudy-day.svg","weatherIcons/cloudy-night.svg","weatherIcons/rainy.svg","weatherIcons/snowy.svg","serviceWorker.js","components/weather.jsx","components/location.jsx","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Weather","props","state","searchRequest","temps","timestamps","currentDescription","sunset","sunrise","currentTemp","currentFeelsLike","currentMain","descriptions","cityName","handleInput","bind","handleSearch","handleReturn","current","forecast","Promise","all","fetch","then","resp1","resp2","ok","Error","json","setState","formatTime","Date","sys","main","temp","toFixed","currentHigh","temp_max","currentLow","temp_min","feels_like","weather","description","list","map","obj","dt","city","name","console","log","catch","error","this","lon","lat","apiKey","fetchWeatherData","e","target","value","arr","months","key","className","getDate","parseInt","getMonth","formatHours","src","getIcons","alt","time","hours","getHours","toString","length","minutes","getMinutes","desc","hour","night","rainy","cloudyNight","clearNight","snowy","clearDay","cloudyDay","zip","arr1","arr2","arr3","k","i","Fragment","style","fontSize","fontFamily","onChange","type","onClick","getBoxes","Component","Location","navigator","geolocation","getCurrentPosition","pos","coords","latitude","longitude","ReactDOM","render","StrictMode","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"uGAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,wC,gBCA3CD,EAAOC,QAAU,IAA0B,0C,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,yKCYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,yJC6LSC,G,wDArMX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTC,cAAe,GACfC,MAAO,GACPC,WAAY,GACZC,mBAAoB,KACpBC,OAAQ,KACRC,QAAS,KACTC,YAAa,KACbC,iBAAkB,KAClBC,YAAa,KACbC,aAAc,GACdC,SAAU,MAEd,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAc,EAAKA,aAAaD,KAAlB,gBACnB,EAAKE,aAAc,EAAKA,aAAaF,KAAlB,gBAjBJ,E,6DAoBFG,EAASC,GAAW,IAAD,OAChCC,QAAQC,IAAI,CAACC,MAAMJ,GAAUI,MAAMH,KAClCI,MAAK,YAAqB,IAAD,mBAAlBC,EAAkB,KAAXC,EAAW,KACtB,GAAID,EAAME,IAAMD,EAAMC,GAClB,MAAO,CAACF,EAAOC,GAEnB,MAAM,IAAIE,MAAM,mCAEnBJ,MAAK,mCAAEC,EAAF,KAASC,EAAT,YAAoBL,QAAQC,IAAI,CAACG,EAAMI,OAAOH,EAAMG,YACzDL,MAAK,YAAyB,IAAD,mBAAtBL,EAAsB,KAAdC,EAAc,KAEd,EAAKU,SAAS,CACVrB,QAAS,EAAKsB,WAAW,IAAIC,KAA2B,IAAtBb,EAAQc,IAAIxB,UAC9CD,OAAQ,EAAKuB,WAAW,IAAIC,KAA0B,IAArBb,EAAQc,IAAIzB,SAC7CE,YAAaS,EAAQe,KAAKC,KAAKC,QAAQ,GACvCC,YAAalB,EAAQe,KAAKI,SAASF,QAAQ,GAC3CG,WAAYpB,EAAQe,KAAKM,SAASJ,QAAQ,GAC1CzB,iBAAkBQ,EAAQe,KAAKO,WAAWL,QAAQ,GAClD7B,mBAAoBY,EAAQuB,QAAQ,GAAGC,YACvC/B,YAAaO,EAAQuB,QAAQ,GAAGR,KAChC5B,WAAYc,EAASwB,KAAKC,KAAI,SAAAC,GAAG,OAAI,IAAId,KAAc,IAATc,EAAIC,OAClD1C,MAAOe,EAASwB,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIZ,KAAKC,KAAKC,QAAQ,MACtDvB,aAAcO,EAASwB,KAAKC,KAAI,SAAAC,GAAG,OAAIA,EAAIJ,QAAQ,GAAGR,QACtDpB,SAAUM,EAAS4B,KAAKC,OAE5BC,QAAQC,IAAI,EAAKhD,MAAME,UAEtC+C,OAAM,SAAAC,GAAUH,QAAQC,IAAIE,Q,0CAG7BH,QAAQC,IAAIG,KAAKnD,MAAMC,eADP,MAEKkD,KAAKpD,MAAlBqD,EAFQ,EAERA,IAAKC,EAFG,EAEHA,IACPC,EAAS,mCACTtC,EAAO,8DAA0DqC,EAA1D,gBAAqED,EAArE,kBAAkFE,EAAlF,iBACPrC,EAAQ,+DAA2DoC,EAA3D,gBAAsED,EAAtE,kBAAmFE,EAAnF,iBACdH,KAAKI,iBAAiBvC,EAASC,K,kCAGvBuC,GAERL,KAAKxB,SAAS,CACV1B,cAAeuD,EAAEC,OAAOC,QAE5BX,QAAQC,IAAIG,KAAKnD,MAAMC,iB,qCAIvB,GAAiC,KAA7BkD,KAAKnD,MAAMC,cAAsB,CACjC,IAAMqD,EAAS,mCACTtC,EAAO,4DAAwDmC,KAAKnD,MAAMC,cAAnE,kBAA0FqD,EAA1F,iBACPrC,EAAQ,6DAAyDkC,KAAKnD,MAAMC,cAApE,kBAA2FqD,EAA3F,iBACdH,KAAKI,iBAAiBvC,EAASC,M,qCAKnCkC,KAAKxB,SAAS,CACV1B,cAAe,KAFR,MAIUkD,KAAKpD,MAAlBqD,EAJG,EAIHA,IAAKC,EAJF,EAIEA,IACPC,EAAS,mCACTtC,EAAO,8DAA0DqC,EAA1D,gBAAqED,EAArE,kBAAkFE,EAAlF,iBACPrC,EAAQ,+DAA2DoC,EAA3D,gBAAsED,EAAtE,kBAAmFE,EAAnF,iBACdH,KAAKI,iBAAiBvC,EAASC,K,+BAG1B0C,GAAM,IAAD,OACJC,EAAS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAChD,OAAQ,SAAU,YAAa,UAAW,WAAY,YACtE,OAAOD,EAAIjB,KAAI,SAAAc,GAAC,OAEJ,yBAAKK,IAAOL,EAAE,GAAIM,UAAU,QACxB,2BAAIN,EAAE,GAAGO,UAAW,IAAKH,EAAOI,SAASR,EAAE,GAAGS,YAAc,IAC5D,2BAAI,EAAKC,YAAYV,EAAE,KACvB,yBAAKW,IAAK,EAAKC,SAASZ,EAAE,GAAIA,EAAE,IAAKa,IAAM,UAC3C,2BAAIb,EAAE,GAAN,QACA,2BAAIA,EAAE,U,kCAMdc,GACR,IAAMC,EAAQD,EAAKE,WAAWC,WAC9B,OAAwB,IAAjBF,EAAMG,OAAeH,EAAQ,MAAQ,IAAMA,EAAQ,Q,iCAGnDD,GACP,IAAIC,EAAQD,EAAKE,WAAWC,WACxBE,EAAUL,EAAKM,aAAaH,WAGhC,OAFAF,EAAyB,IAAjBA,EAAMG,OAAeH,EAAQ,IAAMA,GAE5B,KADfI,EAA6B,IAAnBA,EAAQD,OAAeC,EAAS,IAAMA,K,+BAI3CL,EAAMO,GACX,IAAMC,EAAOR,EAAKE,WACZO,EAASD,GAAQ,IAAQA,GAAQ,EACvC,MAAa,SAATD,EACOG,IACS,WAATH,GAAqBE,EACrBE,IACS,WAATJ,GAAsBE,EAEb,UAATF,GAAqBE,EAEZ,UAATF,GAAoBE,EACpBG,IAEAC,IAJAC,IAFAC,M,+BAWX,GAA4B,OAAxBlC,KAAKnD,MAAMW,UAAqBwC,KAAKnD,MAAME,QAAU,GACrD,OAAO,0CAFN,MAIsCiD,KAAKnD,MAAzCG,EAJF,EAIEA,WAAYD,EAJd,EAIcA,MAAOQ,EAJrB,EAIqBA,aACpB4E,EAAM,SAACC,EAAMC,EAAMC,GAAb,OAAsBF,EAAK7C,KAAI,SAACgD,EAAGC,GAAJ,MAAU,CAACD,EAAGF,EAAKG,GAAIF,EAAKE,QAEvE,OACA,kBAAC,IAAMC,SAAP,KACK7C,QAAQC,IAAIsC,EAAInF,EAAWD,EAAMQ,IAClC,yBAAKoD,UAAY,mBAEb,yBAAKA,UAAY,OAAO+B,MAAS,CAACC,SAAU,GAAIC,WAAY,QACvD5C,KAAKnD,MAAMW,UAEhB,yBAAKwD,IAAKhB,KAAKiB,SAAS,IAAIvC,KAAQsB,KAAKnD,MAAMS,aAAc4D,IAAM,cAC/DP,UAAU,wBACd,yBAAKA,UAAY,eAEb,uBAAG+B,MAAQ,CAACC,SAAS,GAAIC,WAAY,QAChC5C,KAAKnD,MAAMI,oBAEhB,uBAAGyF,MAAO,CAACC,SAAU,GAAIC,WAAY,QAChC5C,KAAKnD,MAAMO,YADhB,QAIA,yCAAe4C,KAAKnD,MAAMQ,iBAA1B,SAEJ,yBAAKsD,UAAU,aACX,yCAAeX,KAAKnD,MAAMM,SAC1B,wCAAc6C,KAAKnD,MAAMK,QACzB,4CAAkB8C,KAAKnD,MAAMkC,YAA7B,QACA,2CAAiBiB,KAAKnD,MAAMoC,WAA5B,SAEJ,yBAAK0B,UAAU,UAAf,2BAEI,2BAAOkC,SAAY7C,KAAKvC,YAAa8C,MAASP,KAAKnD,MAAMC,cACzDgG,KAAK,OAAOnC,UAAU,UACtB,4BAAQoC,QAAS/C,KAAKrC,cAAtB,UAGA,2BACI,4BAAQoF,QAAU/C,KAAKpC,aAAc+C,UAAY,gBAAjD,4BAQZ,yBAAKA,UAAW,mBACZ,yBAAK+B,MAAO,CAACC,SAAU,GAAIC,WAAY,OAAQjC,UAAU,YAAzD,YAGA,yBAAKA,UAAU,oBACVX,KAAKgD,SAASb,EAAInF,EAAWD,EAAMQ,W,GA7LlC0F,cC6BPC,G,wDAjCX,WAAYtG,GAAQ,IAAD,8BACf,cAAMA,IACDC,MAAQ,CACTqD,IAAK,KACLD,IAAK,MAJM,E,gEAQE,IAAD,OAChBkD,UAAUC,YAAYC,oBAClB,SAACC,GACG,EAAK9E,SAAS,CACV0B,IAAKoD,EAAIC,OAAOC,SAChBvD,IAAKqD,EAAIC,OAAOE,iB,+BAO5B,OAAsB,MAAlBzD,KAAKnD,MAAMqD,KAAiC,MAAlBF,KAAKnD,MAAMoD,IAC9B,2CAGP,kBAAC,IAAMwC,SAAP,KACI,yBAAK9B,UAAY,cACb,kBAAC,EAAD,CAASV,IAAKD,KAAKnD,MAAMoD,IAAKC,IAAMF,KAAKnD,MAAMqD,Y,GA3B5C+C,cCGvBS,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SHwHpB,kBAAmBX,WACrBA,UAAUY,cAAcC,MACrB9F,MAAK,SAAA+F,GACJA,EAAaC,gBAEdpE,OAAM,SAAAC,GACLH,QAAQG,MAAMA,EAAMoE,c","file":"static/js/main.16abc990.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/day.7f93fbdb.svg\";","module.exports = __webpack_public_path__ + \"static/media/night.a3f3f38d.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-day.b931d84d.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloudy-night.ef1c6aa1.svg\";","module.exports = __webpack_public_path__ + \"static/media/rainy.2bd23641.svg\";","module.exports = __webpack_public_path__ + \"static/media/snowy.3def7c9f.svg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, { Component } from 'react';\r\nimport clearDay from '../weatherIcons/day.svg';\r\nimport clearNight from '../weatherIcons/night.svg';\r\nimport cloudyDay from '../weatherIcons/cloudy-day.svg';\r\nimport cloudyNight from '../weatherIcons/cloudy-night.svg';\r\nimport rainy from '../weatherIcons/rainy.svg';\r\nimport snowy from '../weatherIcons/snowy.svg';\r\nimport './weather.css'\r\nimport 'bootstrap/dist/css/bootstrap.css';\r\nclass Weather extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            searchRequest: '',\r\n            temps: [],\r\n            timestamps: [],\r\n            currentDescription: null,\r\n            sunset: null, \r\n            sunrise: null,\r\n            currentTemp: null,\r\n            currentFeelsLike: null,\r\n            currentMain: null,\r\n            descriptions: [],\r\n            cityName: null\r\n        };\r\n        this.handleInput = this.handleInput.bind(this);\r\n        this.handleSearch= this.handleSearch.bind(this);\r\n        this.handleReturn= this.handleReturn.bind(this);\r\n    }\r\n\r\n    fetchWeatherData(current, forecast) {\r\n        Promise.all([fetch(current), fetch(forecast)])\r\n        .then(([resp1, resp2]) => {\r\n            if (resp1.ok && resp2.ok) {\r\n                return [resp1, resp2]\r\n            }\r\n            throw new Error('Network response was not ok.');\r\n        })\r\n        .then(([resp1, resp2]) => Promise.all([resp1.json(),resp2.json()]))\r\n        .then(([current,forecast]) => {\r\n                        \r\n                        this.setState({ \r\n                            sunrise: this.formatTime(new Date(current.sys.sunrise * 1000)),\r\n                            sunset: this.formatTime(new Date(current.sys.sunset * 1000)),\r\n                            currentTemp: current.main.temp.toFixed(0),\r\n                            currentHigh: current.main.temp_max.toFixed(0),\r\n                            currentLow: current.main.temp_min.toFixed(0),\r\n                            currentFeelsLike: current.main.feels_like.toFixed(0),\r\n                            currentDescription: current.weather[0].description,\r\n                            currentMain: current.weather[0].main,\r\n                            timestamps: forecast.list.map(obj => new Date(obj.dt * 1000)),\r\n                            temps: forecast.list.map(obj => obj.main.temp.toFixed(0)),\r\n                            descriptions: forecast.list.map(obj => obj.weather[0].main),\r\n                            cityName: forecast.city.name\r\n                        });\r\n                        console.log(this.state.temps);\r\n        })\r\n        .catch(error => {console.log(error)});\r\n    }\r\n    componentDidMount() {\r\n        console.log(this.state.searchRequest)\r\n        const { lon, lat } = this.props\r\n        const apiKey = '541d088bac0c6ef615e53e06d8497f14';\r\n        const current = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`;\r\n        const forecast = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`;\r\n        this.fetchWeatherData(current, forecast);\r\n    }\r\n    \r\n    handleInput(e) {\r\n        \r\n        this.setState({\r\n            searchRequest: e.target.value\r\n        });\r\n        console.log(this.state.searchRequest)\r\n    }\r\n\r\n    handleSearch() {\r\n        if (this.state.searchRequest !== '') {\r\n            const apiKey = '541d088bac0c6ef615e53e06d8497f14';\r\n            const current = `https://api.openweathermap.org/data/2.5/weather?q=${this.state.searchRequest}&appid=${apiKey}&units=metric`;\r\n            const forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${this.state.searchRequest}&appid=${apiKey}&units=metric`;\r\n            this.fetchWeatherData(current, forecast);\r\n        }\r\n    }\r\n\r\n    handleReturn() {\r\n        this.setState({\r\n            searchRequest: ''\r\n        })\r\n        const { lon, lat } = this.props\r\n        const apiKey = '541d088bac0c6ef615e53e06d8497f14';\r\n        const current = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`;\r\n        const forecast = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&appid=${apiKey}&units=metric`;\r\n        this.fetchWeatherData(current, forecast);\r\n    }\r\n\r\n    getBoxes(arr) {\r\n        const months = ['January', 'February', 'March', 'April', 'May', 'June', \r\n                        'July', 'August', 'September', 'October', 'November', 'December'];\r\n        return arr.map(e => (\r\n                    \r\n                    <div key = {e[0]} className=\"card\">\r\n                        <p>{e[0].getDate() +' '+ months[parseInt(e[0].getMonth()) - 1]}</p>\r\n                        <p>{this.formatHours(e[0])}</p>\r\n                        <img src={this.getIcons(e[0], e[2])} alt = 'icons'/>\r\n                        <p>{e[1]}&deg;</p>\r\n                        <p>{e[2]}</p>\r\n                        \r\n                        \r\n                    </div>));\r\n    }\r\n\r\n    formatHours(time) {\r\n        const hours = time.getHours().toString();\r\n        return hours.length === 2 ? hours + \":00\" : \"0\" + hours + \":00\"\r\n    }\r\n\r\n    formatTime(time) {\r\n        let hours = time.getHours().toString();\r\n        let minutes = time.getMinutes().toString();\r\n        hours = hours.length === 2 ? hours : \"0\" + hours;\r\n        minutes = minutes.length === 2 ? minutes: \"0\" + minutes;\r\n        return hours + \":\" + minutes;\r\n    }\r\n\r\n    getIcons(time, desc) {\r\n        const hour = time.getHours();\r\n        const night = (hour >= 18) || (hour <= 5);\r\n        if (desc === 'Rain') {\r\n            return rainy;\r\n        } else if (desc === 'Clouds' && night) {\r\n            return cloudyNight;\r\n        } else if (desc === 'Clouds' && !night) {\r\n            return cloudyDay;\r\n        } else if (desc === 'Clear' && !night) {\r\n            return clearDay;\r\n        } else if (desc === 'Clear' && night) {\r\n            return clearNight;\r\n        } else {\r\n            return snowy;\r\n        }\r\n    }\r\n\r\n    render() { \r\n        if (this.state.cityName === null || this.state.temps === []) {\r\n            return <h2>Loading...</h2>\r\n        }\r\n        const {timestamps, temps, descriptions } = this.state;\r\n        const zip = (arr1, arr2, arr3) => arr1.map((k, i) => [k, arr2[i], arr3[i]]);\r\n\r\n        return (\r\n        <React.Fragment>\r\n            {console.log(zip(timestamps,temps,descriptions))}\r\n            <div className = \"current-weather\">\r\n\r\n                <div className = \"city\" style = {{fontSize: 54, fontFamily: 'Exo'}}>\r\n                    {this.state.cityName}\r\n                </div>\r\n                <img src={this.getIcons(new Date(), this.state.currentMain)} alt = \"weatherIcon\"\r\n                    className=\"current-weatherIcon\"/>\r\n                <div className = \"weatherIcon\">\r\n                    \r\n                    <p style ={{fontSize:25, fontFamily: 'Exo'}}>\r\n                        {this.state.currentDescription}\r\n                    </p>\r\n                    <p style={{fontSize: 44, fontFamily: 'Exo'}}>\r\n                        {this.state.currentTemp}&deg;\r\n                    </p>\r\n                    \r\n                    <p>feels like {this.state.currentFeelsLike}&deg;</p>\r\n                </div>\r\n                <div className=\"more-info\">\r\n                    <p>sunrise at {this.state.sunrise}</p>\r\n                    <p>sunset at {this.state.sunset}</p>\r\n                    <p>today's high: {this.state.currentHigh}&deg;</p>\r\n                    <p>today's low: {this.state.currentLow}&deg;</p>\r\n                </div>\r\n                <div className='search'>\r\n                    Select another location:\r\n                    <input onChange = {this.handleInput} value = {this.state.searchRequest} \r\n                    type=\"text\" className=\"input\"/>\r\n                    <button onClick={this.handleSearch}>\r\n                        Search\r\n                    </button>\r\n                    <p>\r\n                        <button onClick= {this.handleReturn} className = \"button-style\">\r\n                            Return to my location\r\n                        </button>\r\n                    </p>\r\n\r\n                </div>\r\n            </div>\r\n\r\n            <div className= \"bottom-forecast\">\r\n                <div style={{fontSize: 40, fontFamily: 'Exo'}} className=\"forecast\">\r\n                    Forecast\r\n                </div>\r\n                <div className=\"forecast-wrapper\">\r\n                    {this.getBoxes(zip(timestamps,temps,descriptions))}\r\n                </div>\r\n            </div>\r\n\r\n            \r\n        </React.Fragment>)\r\n    }\r\n}\r\n \r\nexport default Weather;","import React, { Component } from 'react';\r\nimport Weather from \"./weather\";\r\nimport \"./location.css\";\r\n\r\nclass Location extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = { \r\n            lat: null,\r\n            lon: null\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        navigator.geolocation.getCurrentPosition(\r\n            (pos) => {\r\n                this.setState({\r\n                    lat: pos.coords.latitude,\r\n                    lon: pos.coords.longitude\r\n                })\r\n            }\r\n        )\r\n    }\r\n\r\n    render() { \r\n        if (this.state.lat == null || this.state.lon == null) {\r\n            return <h2>Loading....</h2>\r\n        }\r\n        return (\r\n            <React.Fragment>\r\n                <div className = \"background\">\r\n                    <Weather lon={this.state.lon} lat ={this.state.lat}/>\r\n                </div>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n \r\nexport default Location;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Location from './components/location';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Location />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}